// Code generated by mockery v2.49.0. DO NOT EDIT.

package codegen

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/tniah/authlib/models"

	time "time"

	types "github.com/tniah/authlib/types"
)

// MockExpiresInGenerator is an autogenerated mock type for the ExpiresInGenerator type
type MockExpiresInGenerator struct {
	mock.Mock
}

type MockExpiresInGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExpiresInGenerator) EXPECT() *MockExpiresInGenerator_Expecter {
	return &MockExpiresInGenerator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: gt, client
func (_m *MockExpiresInGenerator) Execute(gt types.GrantType, client models.Client) time.Duration {
	ret := _m.Called(gt, client)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(types.GrantType, models.Client) time.Duration); ok {
		r0 = rf(gt, client)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockExpiresInGenerator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockExpiresInGenerator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - gt types.GrantType
//   - client models.Client
func (_e *MockExpiresInGenerator_Expecter) Execute(gt interface{}, client interface{}) *MockExpiresInGenerator_Execute_Call {
	return &MockExpiresInGenerator_Execute_Call{Call: _e.mock.On("Execute", gt, client)}
}

func (_c *MockExpiresInGenerator_Execute_Call) Run(run func(gt types.GrantType, client models.Client)) *MockExpiresInGenerator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.GrantType), args[1].(models.Client))
	})
	return _c
}

func (_c *MockExpiresInGenerator_Execute_Call) Return(_a0 time.Duration) *MockExpiresInGenerator_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExpiresInGenerator_Execute_Call) RunAndReturn(run func(types.GrantType, models.Client) time.Duration) *MockExpiresInGenerator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExpiresInGenerator creates a new instance of MockExpiresInGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExpiresInGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExpiresInGenerator {
	mock := &MockExpiresInGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
