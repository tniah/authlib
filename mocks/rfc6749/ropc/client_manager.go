// Code generated by mockery v2.49.0. DO NOT EDIT.

package ropc

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	models "github.com/tniah/authlib/models"

	types "github.com/tniah/authlib/types"
)

// MockClientManager is an autogenerated mock type for the ClientManager type
type MockClientManager struct {
	mock.Mock
}

type MockClientManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientManager) EXPECT() *MockClientManager_Expecter {
	return &MockClientManager_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: r, supportedMethods, endpoint
func (_m *MockClientManager) Authenticate(r *http.Request, supportedMethods map[types.ClientAuthMethod]bool, endpoint string) (models.Client, error) {
	ret := _m.Called(r, supportedMethods, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, map[types.ClientAuthMethod]bool, string) (models.Client, error)); ok {
		return rf(r, supportedMethods, endpoint)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, map[types.ClientAuthMethod]bool, string) models.Client); ok {
		r0 = rf(r, supportedMethods, endpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, map[types.ClientAuthMethod]bool, string) error); ok {
		r1 = rf(r, supportedMethods, endpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientManager_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockClientManager_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - r *http.Request
//   - supportedMethods map[types.ClientAuthMethod]bool
//   - endpoint string
func (_e *MockClientManager_Expecter) Authenticate(r interface{}, supportedMethods interface{}, endpoint interface{}) *MockClientManager_Authenticate_Call {
	return &MockClientManager_Authenticate_Call{Call: _e.mock.On("Authenticate", r, supportedMethods, endpoint)}
}

func (_c *MockClientManager_Authenticate_Call) Run(run func(r *http.Request, supportedMethods map[types.ClientAuthMethod]bool, endpoint string)) *MockClientManager_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request), args[1].(map[types.ClientAuthMethod]bool), args[2].(string))
	})
	return _c
}

func (_c *MockClientManager_Authenticate_Call) Return(_a0 models.Client, _a1 error) *MockClientManager_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientManager_Authenticate_Call) RunAndReturn(run func(*http.Request, map[types.ClientAuthMethod]bool, string) (models.Client, error)) *MockClientManager_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientManager creates a new instance of MockClientManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientManager {
	mock := &MockClientManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
