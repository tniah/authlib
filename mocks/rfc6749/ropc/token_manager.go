// Code generated by mockery v2.49.0. DO NOT EDIT.

package ropc

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/tniah/authlib/models"

	requests "github.com/tniah/authlib/requests"
)

// MockTokenManager is an autogenerated mock type for the TokenManager type
type MockTokenManager struct {
	mock.Mock
}

type MockTokenManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenManager) EXPECT() *MockTokenManager_Expecter {
	return &MockTokenManager_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: token, r, includeRefreshToken
func (_m *MockTokenManager) Generate(token models.Token, r *requests.TokenRequest, includeRefreshToken bool) error {
	ret := _m.Called(token, r, includeRefreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Token, *requests.TokenRequest, bool) error); ok {
		r0 = rf(token, r, includeRefreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenManager_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockTokenManager_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - token models.Token
//   - r *requests.TokenRequest
//   - includeRefreshToken bool
func (_e *MockTokenManager_Expecter) Generate(token interface{}, r interface{}, includeRefreshToken interface{}) *MockTokenManager_Generate_Call {
	return &MockTokenManager_Generate_Call{Call: _e.mock.On("Generate", token, r, includeRefreshToken)}
}

func (_c *MockTokenManager_Generate_Call) Run(run func(token models.Token, r *requests.TokenRequest, includeRefreshToken bool)) *MockTokenManager_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Token), args[1].(*requests.TokenRequest), args[2].(bool))
	})
	return _c
}

func (_c *MockTokenManager_Generate_Call) Return(_a0 error) *MockTokenManager_Generate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenManager_Generate_Call) RunAndReturn(run func(models.Token, *requests.TokenRequest, bool) error) *MockTokenManager_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function with given fields:
func (_m *MockTokenManager) New() models.Token {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 models.Token
	if rf, ok := ret.Get(0).(func() models.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Token)
		}
	}

	return r0
}

// MockTokenManager_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockTokenManager_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
func (_e *MockTokenManager_Expecter) New() *MockTokenManager_New_Call {
	return &MockTokenManager_New_Call{Call: _e.mock.On("New")}
}

func (_c *MockTokenManager_New_Call) Run(run func()) *MockTokenManager_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTokenManager_New_Call) Return(_a0 models.Token) *MockTokenManager_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenManager_New_Call) RunAndReturn(run func() models.Token) *MockTokenManager_New_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, token
func (_m *MockTokenManager) Save(ctx context.Context, token models.Token) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Token) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenManager_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockTokenManager_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - token models.Token
func (_e *MockTokenManager_Expecter) Save(ctx interface{}, token interface{}) *MockTokenManager_Save_Call {
	return &MockTokenManager_Save_Call{Call: _e.mock.On("Save", ctx, token)}
}

func (_c *MockTokenManager_Save_Call) Run(run func(ctx context.Context, token models.Token)) *MockTokenManager_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.Token))
	})
	return _c
}

func (_c *MockTokenManager_Save_Call) Return(_a0 error) *MockTokenManager_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenManager_Save_Call) RunAndReturn(run func(context.Context, models.Token) error) *MockTokenManager_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenManager creates a new instance of MockTokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenManager {
	mock := &MockTokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
