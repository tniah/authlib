// Code generated by mockery v2.49.0. DO NOT EDIT.

package ropc

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	models "github.com/tniah/authlib/models"
)

// MockUserManager is an autogenerated mock type for the UserManager type
type MockUserManager struct {
	mock.Mock
}

type MockUserManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserManager) EXPECT() *MockUserManager_Expecter {
	return &MockUserManager_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: username, password, client, r
func (_m *MockUserManager) Authenticate(username string, password string, client models.Client, r *http.Request) (models.User, error) {
	ret := _m.Called(username, password, client, r)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, models.Client, *http.Request) (models.User, error)); ok {
		return rf(username, password, client, r)
	}
	if rf, ok := ret.Get(0).(func(string, string, models.Client, *http.Request) models.User); ok {
		r0 = rf(username, password, client, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, models.Client, *http.Request) error); ok {
		r1 = rf(username, password, client, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserManager_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockUserManager_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - username string
//   - password string
//   - client models.Client
//   - r *http.Request
func (_e *MockUserManager_Expecter) Authenticate(username interface{}, password interface{}, client interface{}, r interface{}) *MockUserManager_Authenticate_Call {
	return &MockUserManager_Authenticate_Call{Call: _e.mock.On("Authenticate", username, password, client, r)}
}

func (_c *MockUserManager_Authenticate_Call) Run(run func(username string, password string, client models.Client, r *http.Request)) *MockUserManager_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(models.Client), args[3].(*http.Request))
	})
	return _c
}

func (_c *MockUserManager_Authenticate_Call) Return(_a0 models.User, _a1 error) *MockUserManager_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserManager_Authenticate_Call) RunAndReturn(run func(string, string, models.Client, *http.Request) (models.User, error)) *MockUserManager_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserManager creates a new instance of MockUserManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserManager {
	mock := &MockUserManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
