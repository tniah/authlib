// Code generated by mockery v2.49.0. DO NOT EDIT.

package rfc6749

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	models "github.com/tniah/authlib/models"

	types "github.com/tniah/authlib/types"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: r
func (_m *MockHandler) Authenticate(r *http.Request) (models.Client, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request) (models.Client, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*http.Request) models.Client); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHandler_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockHandler_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - r *http.Request
func (_e *MockHandler_Expecter) Authenticate(r interface{}) *MockHandler_Authenticate_Call {
	return &MockHandler_Authenticate_Call{Call: _e.mock.On("Authenticate", r)}
}

func (_c *MockHandler_Authenticate_Call) Run(run func(r *http.Request)) *MockHandler_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockHandler_Authenticate_Call) Return(_a0 models.Client, _a1 error) *MockHandler_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHandler_Authenticate_Call) RunAndReturn(run func(*http.Request) (models.Client, error)) *MockHandler_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Method provides a mock function with given fields:
func (_m *MockHandler) Method() types.ClientAuthMethod {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Method")
	}

	var r0 types.ClientAuthMethod
	if rf, ok := ret.Get(0).(func() types.ClientAuthMethod); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.ClientAuthMethod)
	}

	return r0
}

// MockHandler_Method_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Method'
type MockHandler_Method_Call struct {
	*mock.Call
}

// Method is a helper method to define mock.On call
func (_e *MockHandler_Expecter) Method() *MockHandler_Method_Call {
	return &MockHandler_Method_Call{Call: _e.mock.On("Method")}
}

func (_c *MockHandler_Method_Call) Run(run func()) *MockHandler_Method_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandler_Method_Call) Return(_a0 types.ClientAuthMethod) *MockHandler_Method_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_Method_Call) RunAndReturn(run func() types.ClientAuthMethod) *MockHandler_Method_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
