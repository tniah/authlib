// Code generated by mockery v2.49.0. DO NOT EDIT.

package rfc6749

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/tniah/authlib/models"
)

// MockClientStore is an autogenerated mock type for the ClientStore type
type MockClientStore struct {
	mock.Mock
}

type MockClientStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientStore) EXPECT() *MockClientStore_Expecter {
	return &MockClientStore_Expecter{mock: &_m.Mock}
}

// QueryByClientID provides a mock function with given fields: ctx, clientID
func (_m *MockClientStore) QueryByClientID(ctx context.Context, clientID string) (models.Client, error) {
	ret := _m.Called(ctx, clientID)

	if len(ret) == 0 {
		panic("no return value specified for QueryByClientID")
	}

	var r0 models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Client, error)); ok {
		return rf(ctx, clientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Client); ok {
		r0 = rf(ctx, clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientStore_QueryByClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByClientID'
type MockClientStore_QueryByClientID_Call struct {
	*mock.Call
}

// QueryByClientID is a helper method to define mock.On call
//   - ctx context.Context
//   - clientID string
func (_e *MockClientStore_Expecter) QueryByClientID(ctx interface{}, clientID interface{}) *MockClientStore_QueryByClientID_Call {
	return &MockClientStore_QueryByClientID_Call{Call: _e.mock.On("QueryByClientID", ctx, clientID)}
}

func (_c *MockClientStore_QueryByClientID_Call) Run(run func(ctx context.Context, clientID string)) *MockClientStore_QueryByClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClientStore_QueryByClientID_Call) Return(_a0 models.Client, _a1 error) *MockClientStore_QueryByClientID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientStore_QueryByClientID_Call) RunAndReturn(run func(context.Context, string) (models.Client, error)) *MockClientStore_QueryByClientID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientStore creates a new instance of MockClientStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientStore {
	mock := &MockClientStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
