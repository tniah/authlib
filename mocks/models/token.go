// Code generated by mockery v2.49.0. DO NOT EDIT.

package models

import (
	mock "github.com/stretchr/testify/mock"

	time "time"

	types "github.com/tniah/authlib/types"
)

// MockToken is an autogenerated mock type for the Token type
type MockToken struct {
	mock.Mock
}

type MockToken_Expecter struct {
	mock *mock.Mock
}

func (_m *MockToken) EXPECT() *MockToken_Expecter {
	return &MockToken_Expecter{mock: &_m.Mock}
}

// GetAccessToken provides a mock function with given fields:
func (_m *MockToken) GetAccessToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccessToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockToken_GetAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessToken'
type MockToken_GetAccessToken_Call struct {
	*mock.Call
}

// GetAccessToken is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetAccessToken() *MockToken_GetAccessToken_Call {
	return &MockToken_GetAccessToken_Call{Call: _e.mock.On("GetAccessToken")}
}

func (_c *MockToken_GetAccessToken_Call) Run(run func()) *MockToken_GetAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetAccessToken_Call) Return(_a0 string) *MockToken_GetAccessToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetAccessToken_Call) RunAndReturn(run func() string) *MockToken_GetAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccessTokenExpiresIn provides a mock function with given fields:
func (_m *MockToken) GetAccessTokenExpiresIn() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccessTokenExpiresIn")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockToken_GetAccessTokenExpiresIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccessTokenExpiresIn'
type MockToken_GetAccessTokenExpiresIn_Call struct {
	*mock.Call
}

// GetAccessTokenExpiresIn is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetAccessTokenExpiresIn() *MockToken_GetAccessTokenExpiresIn_Call {
	return &MockToken_GetAccessTokenExpiresIn_Call{Call: _e.mock.On("GetAccessTokenExpiresIn")}
}

func (_c *MockToken_GetAccessTokenExpiresIn_Call) Run(run func()) *MockToken_GetAccessTokenExpiresIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetAccessTokenExpiresIn_Call) Return(_a0 time.Duration) *MockToken_GetAccessTokenExpiresIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetAccessTokenExpiresIn_Call) RunAndReturn(run func() time.Duration) *MockToken_GetAccessTokenExpiresIn_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientID provides a mock function with given fields:
func (_m *MockToken) GetClientID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockToken_GetClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientID'
type MockToken_GetClientID_Call struct {
	*mock.Call
}

// GetClientID is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetClientID() *MockToken_GetClientID_Call {
	return &MockToken_GetClientID_Call{Call: _e.mock.On("GetClientID")}
}

func (_c *MockToken_GetClientID_Call) Run(run func()) *MockToken_GetClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetClientID_Call) Return(_a0 string) *MockToken_GetClientID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetClientID_Call) RunAndReturn(run func() string) *MockToken_GetClientID_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssuedAt provides a mock function with given fields:
func (_m *MockToken) GetIssuedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIssuedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockToken_GetIssuedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssuedAt'
type MockToken_GetIssuedAt_Call struct {
	*mock.Call
}

// GetIssuedAt is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetIssuedAt() *MockToken_GetIssuedAt_Call {
	return &MockToken_GetIssuedAt_Call{Call: _e.mock.On("GetIssuedAt")}
}

func (_c *MockToken_GetIssuedAt_Call) Run(run func()) *MockToken_GetIssuedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetIssuedAt_Call) Return(_a0 time.Time) *MockToken_GetIssuedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetIssuedAt_Call) RunAndReturn(run func() time.Time) *MockToken_GetIssuedAt_Call {
	_c.Call.Return(run)
	return _c
}

// GetJwtID provides a mock function with given fields:
func (_m *MockToken) GetJwtID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetJwtID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockToken_GetJwtID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJwtID'
type MockToken_GetJwtID_Call struct {
	*mock.Call
}

// GetJwtID is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetJwtID() *MockToken_GetJwtID_Call {
	return &MockToken_GetJwtID_Call{Call: _e.mock.On("GetJwtID")}
}

func (_c *MockToken_GetJwtID_Call) Run(run func()) *MockToken_GetJwtID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetJwtID_Call) Return(_a0 string) *MockToken_GetJwtID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetJwtID_Call) RunAndReturn(run func() string) *MockToken_GetJwtID_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshToken provides a mock function with given fields:
func (_m *MockToken) GetRefreshToken() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshToken")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockToken_GetRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshToken'
type MockToken_GetRefreshToken_Call struct {
	*mock.Call
}

// GetRefreshToken is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetRefreshToken() *MockToken_GetRefreshToken_Call {
	return &MockToken_GetRefreshToken_Call{Call: _e.mock.On("GetRefreshToken")}
}

func (_c *MockToken_GetRefreshToken_Call) Run(run func()) *MockToken_GetRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetRefreshToken_Call) Return(_a0 string) *MockToken_GetRefreshToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetRefreshToken_Call) RunAndReturn(run func() string) *MockToken_GetRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefreshTokenExpiresIn provides a mock function with given fields:
func (_m *MockToken) GetRefreshTokenExpiresIn() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshTokenExpiresIn")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockToken_GetRefreshTokenExpiresIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefreshTokenExpiresIn'
type MockToken_GetRefreshTokenExpiresIn_Call struct {
	*mock.Call
}

// GetRefreshTokenExpiresIn is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetRefreshTokenExpiresIn() *MockToken_GetRefreshTokenExpiresIn_Call {
	return &MockToken_GetRefreshTokenExpiresIn_Call{Call: _e.mock.On("GetRefreshTokenExpiresIn")}
}

func (_c *MockToken_GetRefreshTokenExpiresIn_Call) Run(run func()) *MockToken_GetRefreshTokenExpiresIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetRefreshTokenExpiresIn_Call) Return(_a0 time.Duration) *MockToken_GetRefreshTokenExpiresIn_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetRefreshTokenExpiresIn_Call) RunAndReturn(run func() time.Duration) *MockToken_GetRefreshTokenExpiresIn_Call {
	_c.Call.Return(run)
	return _c
}

// GetScopes provides a mock function with given fields:
func (_m *MockToken) GetScopes() types.Scopes {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScopes")
	}

	var r0 types.Scopes
	if rf, ok := ret.Get(0).(func() types.Scopes); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Scopes)
		}
	}

	return r0
}

// MockToken_GetScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopes'
type MockToken_GetScopes_Call struct {
	*mock.Call
}

// GetScopes is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetScopes() *MockToken_GetScopes_Call {
	return &MockToken_GetScopes_Call{Call: _e.mock.On("GetScopes")}
}

func (_c *MockToken_GetScopes_Call) Run(run func()) *MockToken_GetScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetScopes_Call) Return(_a0 types.Scopes) *MockToken_GetScopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetScopes_Call) RunAndReturn(run func() types.Scopes) *MockToken_GetScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetType provides a mock function with given fields:
func (_m *MockToken) GetType() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockToken_GetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetType'
type MockToken_GetType_Call struct {
	*mock.Call
}

// GetType is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetType() *MockToken_GetType_Call {
	return &MockToken_GetType_Call{Call: _e.mock.On("GetType")}
}

func (_c *MockToken_GetType_Call) Run(run func()) *MockToken_GetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetType_Call) Return(_a0 string) *MockToken_GetType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetType_Call) RunAndReturn(run func() string) *MockToken_GetType_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserID provides a mock function with given fields:
func (_m *MockToken) GetUserID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUserID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockToken_GetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserID'
type MockToken_GetUserID_Call struct {
	*mock.Call
}

// GetUserID is a helper method to define mock.On call
func (_e *MockToken_Expecter) GetUserID() *MockToken_GetUserID_Call {
	return &MockToken_GetUserID_Call{Call: _e.mock.On("GetUserID")}
}

func (_c *MockToken_GetUserID_Call) Run(run func()) *MockToken_GetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockToken_GetUserID_Call) Return(_a0 string) *MockToken_GetUserID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockToken_GetUserID_Call) RunAndReturn(run func() string) *MockToken_GetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccessToken provides a mock function with given fields: accessToken
func (_m *MockToken) SetAccessToken(accessToken string) {
	_m.Called(accessToken)
}

// MockToken_SetAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccessToken'
type MockToken_SetAccessToken_Call struct {
	*mock.Call
}

// SetAccessToken is a helper method to define mock.On call
//   - accessToken string
func (_e *MockToken_Expecter) SetAccessToken(accessToken interface{}) *MockToken_SetAccessToken_Call {
	return &MockToken_SetAccessToken_Call{Call: _e.mock.On("SetAccessToken", accessToken)}
}

func (_c *MockToken_SetAccessToken_Call) Run(run func(accessToken string)) *MockToken_SetAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockToken_SetAccessToken_Call) Return() *MockToken_SetAccessToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetAccessToken_Call) RunAndReturn(run func(string)) *MockToken_SetAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetAccessTokenExpiresIn provides a mock function with given fields: exp
func (_m *MockToken) SetAccessTokenExpiresIn(exp time.Duration) {
	_m.Called(exp)
}

// MockToken_SetAccessTokenExpiresIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAccessTokenExpiresIn'
type MockToken_SetAccessTokenExpiresIn_Call struct {
	*mock.Call
}

// SetAccessTokenExpiresIn is a helper method to define mock.On call
//   - exp time.Duration
func (_e *MockToken_Expecter) SetAccessTokenExpiresIn(exp interface{}) *MockToken_SetAccessTokenExpiresIn_Call {
	return &MockToken_SetAccessTokenExpiresIn_Call{Call: _e.mock.On("SetAccessTokenExpiresIn", exp)}
}

func (_c *MockToken_SetAccessTokenExpiresIn_Call) Run(run func(exp time.Duration)) *MockToken_SetAccessTokenExpiresIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockToken_SetAccessTokenExpiresIn_Call) Return() *MockToken_SetAccessTokenExpiresIn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetAccessTokenExpiresIn_Call) RunAndReturn(run func(time.Duration)) *MockToken_SetAccessTokenExpiresIn_Call {
	_c.Call.Return(run)
	return _c
}

// SetClientID provides a mock function with given fields: clientID
func (_m *MockToken) SetClientID(clientID string) {
	_m.Called(clientID)
}

// MockToken_SetClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetClientID'
type MockToken_SetClientID_Call struct {
	*mock.Call
}

// SetClientID is a helper method to define mock.On call
//   - clientID string
func (_e *MockToken_Expecter) SetClientID(clientID interface{}) *MockToken_SetClientID_Call {
	return &MockToken_SetClientID_Call{Call: _e.mock.On("SetClientID", clientID)}
}

func (_c *MockToken_SetClientID_Call) Run(run func(clientID string)) *MockToken_SetClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockToken_SetClientID_Call) Return() *MockToken_SetClientID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetClientID_Call) RunAndReturn(run func(string)) *MockToken_SetClientID_Call {
	_c.Call.Return(run)
	return _c
}

// SetIssuedAt provides a mock function with given fields: issuedAt
func (_m *MockToken) SetIssuedAt(issuedAt time.Time) {
	_m.Called(issuedAt)
}

// MockToken_SetIssuedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIssuedAt'
type MockToken_SetIssuedAt_Call struct {
	*mock.Call
}

// SetIssuedAt is a helper method to define mock.On call
//   - issuedAt time.Time
func (_e *MockToken_Expecter) SetIssuedAt(issuedAt interface{}) *MockToken_SetIssuedAt_Call {
	return &MockToken_SetIssuedAt_Call{Call: _e.mock.On("SetIssuedAt", issuedAt)}
}

func (_c *MockToken_SetIssuedAt_Call) Run(run func(issuedAt time.Time)) *MockToken_SetIssuedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Time))
	})
	return _c
}

func (_c *MockToken_SetIssuedAt_Call) Return() *MockToken_SetIssuedAt_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetIssuedAt_Call) RunAndReturn(run func(time.Time)) *MockToken_SetIssuedAt_Call {
	_c.Call.Return(run)
	return _c
}

// SetJwtID provides a mock function with given fields: id
func (_m *MockToken) SetJwtID(id string) {
	_m.Called(id)
}

// MockToken_SetJwtID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetJwtID'
type MockToken_SetJwtID_Call struct {
	*mock.Call
}

// SetJwtID is a helper method to define mock.On call
//   - id string
func (_e *MockToken_Expecter) SetJwtID(id interface{}) *MockToken_SetJwtID_Call {
	return &MockToken_SetJwtID_Call{Call: _e.mock.On("SetJwtID", id)}
}

func (_c *MockToken_SetJwtID_Call) Run(run func(id string)) *MockToken_SetJwtID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockToken_SetJwtID_Call) Return() *MockToken_SetJwtID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetJwtID_Call) RunAndReturn(run func(string)) *MockToken_SetJwtID_Call {
	_c.Call.Return(run)
	return _c
}

// SetRefreshToken provides a mock function with given fields: refreshToken
func (_m *MockToken) SetRefreshToken(refreshToken string) {
	_m.Called(refreshToken)
}

// MockToken_SetRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRefreshToken'
type MockToken_SetRefreshToken_Call struct {
	*mock.Call
}

// SetRefreshToken is a helper method to define mock.On call
//   - refreshToken string
func (_e *MockToken_Expecter) SetRefreshToken(refreshToken interface{}) *MockToken_SetRefreshToken_Call {
	return &MockToken_SetRefreshToken_Call{Call: _e.mock.On("SetRefreshToken", refreshToken)}
}

func (_c *MockToken_SetRefreshToken_Call) Run(run func(refreshToken string)) *MockToken_SetRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockToken_SetRefreshToken_Call) Return() *MockToken_SetRefreshToken_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetRefreshToken_Call) RunAndReturn(run func(string)) *MockToken_SetRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// SetRefreshTokenExpiresIn provides a mock function with given fields: exp
func (_m *MockToken) SetRefreshTokenExpiresIn(exp time.Duration) {
	_m.Called(exp)
}

// MockToken_SetRefreshTokenExpiresIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRefreshTokenExpiresIn'
type MockToken_SetRefreshTokenExpiresIn_Call struct {
	*mock.Call
}

// SetRefreshTokenExpiresIn is a helper method to define mock.On call
//   - exp time.Duration
func (_e *MockToken_Expecter) SetRefreshTokenExpiresIn(exp interface{}) *MockToken_SetRefreshTokenExpiresIn_Call {
	return &MockToken_SetRefreshTokenExpiresIn_Call{Call: _e.mock.On("SetRefreshTokenExpiresIn", exp)}
}

func (_c *MockToken_SetRefreshTokenExpiresIn_Call) Run(run func(exp time.Duration)) *MockToken_SetRefreshTokenExpiresIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockToken_SetRefreshTokenExpiresIn_Call) Return() *MockToken_SetRefreshTokenExpiresIn_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetRefreshTokenExpiresIn_Call) RunAndReturn(run func(time.Duration)) *MockToken_SetRefreshTokenExpiresIn_Call {
	_c.Call.Return(run)
	return _c
}

// SetScopes provides a mock function with given fields: scopes
func (_m *MockToken) SetScopes(scopes types.Scopes) {
	_m.Called(scopes)
}

// MockToken_SetScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetScopes'
type MockToken_SetScopes_Call struct {
	*mock.Call
}

// SetScopes is a helper method to define mock.On call
//   - scopes types.Scopes
func (_e *MockToken_Expecter) SetScopes(scopes interface{}) *MockToken_SetScopes_Call {
	return &MockToken_SetScopes_Call{Call: _e.mock.On("SetScopes", scopes)}
}

func (_c *MockToken_SetScopes_Call) Run(run func(scopes types.Scopes)) *MockToken_SetScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Scopes))
	})
	return _c
}

func (_c *MockToken_SetScopes_Call) Return() *MockToken_SetScopes_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetScopes_Call) RunAndReturn(run func(types.Scopes)) *MockToken_SetScopes_Call {
	_c.Call.Return(run)
	return _c
}

// SetType provides a mock function with given fields: _a0
func (_m *MockToken) SetType(_a0 string) {
	_m.Called(_a0)
}

// MockToken_SetType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetType'
type MockToken_SetType_Call struct {
	*mock.Call
}

// SetType is a helper method to define mock.On call
//   - _a0 string
func (_e *MockToken_Expecter) SetType(_a0 interface{}) *MockToken_SetType_Call {
	return &MockToken_SetType_Call{Call: _e.mock.On("SetType", _a0)}
}

func (_c *MockToken_SetType_Call) Run(run func(_a0 string)) *MockToken_SetType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockToken_SetType_Call) Return() *MockToken_SetType_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetType_Call) RunAndReturn(run func(string)) *MockToken_SetType_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserID provides a mock function with given fields: userID
func (_m *MockToken) SetUserID(userID string) {
	_m.Called(userID)
}

// MockToken_SetUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserID'
type MockToken_SetUserID_Call struct {
	*mock.Call
}

// SetUserID is a helper method to define mock.On call
//   - userID string
func (_e *MockToken_Expecter) SetUserID(userID interface{}) *MockToken_SetUserID_Call {
	return &MockToken_SetUserID_Call{Call: _e.mock.On("SetUserID", userID)}
}

func (_c *MockToken_SetUserID_Call) Run(run func(userID string)) *MockToken_SetUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockToken_SetUserID_Call) Return() *MockToken_SetUserID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockToken_SetUserID_Call) RunAndReturn(run func(string)) *MockToken_SetUserID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockToken creates a new instance of MockToken. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockToken(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockToken {
	mock := &MockToken{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
