// Code generated by mockery v2.49.0. DO NOT EDIT.

package models

import mock "github.com/stretchr/testify/mock"

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CheckClientSecret provides a mock function with given fields: secret
func (_m *MockClient) CheckClientSecret(secret string) bool {
	ret := _m.Called(secret)

	if len(ret) == 0 {
		panic("no return value specified for CheckClientSecret")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(secret)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClient_CheckClientSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckClientSecret'
type MockClient_CheckClientSecret_Call struct {
	*mock.Call
}

// CheckClientSecret is a helper method to define mock.On call
//   - secret string
func (_e *MockClient_Expecter) CheckClientSecret(secret interface{}) *MockClient_CheckClientSecret_Call {
	return &MockClient_CheckClientSecret_Call{Call: _e.mock.On("CheckClientSecret", secret)}
}

func (_c *MockClient_CheckClientSecret_Call) Run(run func(secret string)) *MockClient_CheckClientSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_CheckClientSecret_Call) Return(_a0 bool) *MockClient_CheckClientSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CheckClientSecret_Call) RunAndReturn(run func(string) bool) *MockClient_CheckClientSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CheckGrantType provides a mock function with given fields: gt
func (_m *MockClient) CheckGrantType(gt string) bool {
	ret := _m.Called(gt)

	if len(ret) == 0 {
		panic("no return value specified for CheckGrantType")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(gt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClient_CheckGrantType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckGrantType'
type MockClient_CheckGrantType_Call struct {
	*mock.Call
}

// CheckGrantType is a helper method to define mock.On call
//   - gt string
func (_e *MockClient_Expecter) CheckGrantType(gt interface{}) *MockClient_CheckGrantType_Call {
	return &MockClient_CheckGrantType_Call{Call: _e.mock.On("CheckGrantType", gt)}
}

func (_c *MockClient_CheckGrantType_Call) Run(run func(gt string)) *MockClient_CheckGrantType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_CheckGrantType_Call) Return(_a0 bool) *MockClient_CheckGrantType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CheckGrantType_Call) RunAndReturn(run func(string) bool) *MockClient_CheckGrantType_Call {
	_c.Call.Return(run)
	return _c
}

// CheckRedirectURI provides a mock function with given fields: redirectURI
func (_m *MockClient) CheckRedirectURI(redirectURI string) bool {
	ret := _m.Called(redirectURI)

	if len(ret) == 0 {
		panic("no return value specified for CheckRedirectURI")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(redirectURI)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClient_CheckRedirectURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRedirectURI'
type MockClient_CheckRedirectURI_Call struct {
	*mock.Call
}

// CheckRedirectURI is a helper method to define mock.On call
//   - redirectURI string
func (_e *MockClient_Expecter) CheckRedirectURI(redirectURI interface{}) *MockClient_CheckRedirectURI_Call {
	return &MockClient_CheckRedirectURI_Call{Call: _e.mock.On("CheckRedirectURI", redirectURI)}
}

func (_c *MockClient_CheckRedirectURI_Call) Run(run func(redirectURI string)) *MockClient_CheckRedirectURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_CheckRedirectURI_Call) Return(_a0 bool) *MockClient_CheckRedirectURI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CheckRedirectURI_Call) RunAndReturn(run func(string) bool) *MockClient_CheckRedirectURI_Call {
	_c.Call.Return(run)
	return _c
}

// CheckResponseType provides a mock function with given fields: rt
func (_m *MockClient) CheckResponseType(rt string) bool {
	ret := _m.Called(rt)

	if len(ret) == 0 {
		panic("no return value specified for CheckResponseType")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(rt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClient_CheckResponseType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckResponseType'
type MockClient_CheckResponseType_Call struct {
	*mock.Call
}

// CheckResponseType is a helper method to define mock.On call
//   - rt string
func (_e *MockClient_Expecter) CheckResponseType(rt interface{}) *MockClient_CheckResponseType_Call {
	return &MockClient_CheckResponseType_Call{Call: _e.mock.On("CheckResponseType", rt)}
}

func (_c *MockClient_CheckResponseType_Call) Run(run func(rt string)) *MockClient_CheckResponseType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_CheckResponseType_Call) Return(_a0 bool) *MockClient_CheckResponseType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CheckResponseType_Call) RunAndReturn(run func(string) bool) *MockClient_CheckResponseType_Call {
	_c.Call.Return(run)
	return _c
}

// CheckTokenEndpointAuthMethod provides a mock function with given fields: authMethod, endpoint
func (_m *MockClient) CheckTokenEndpointAuthMethod(authMethod string, endpoint string) bool {
	ret := _m.Called(authMethod, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for CheckTokenEndpointAuthMethod")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(authMethod, endpoint)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClient_CheckTokenEndpointAuthMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckTokenEndpointAuthMethod'
type MockClient_CheckTokenEndpointAuthMethod_Call struct {
	*mock.Call
}

// CheckTokenEndpointAuthMethod is a helper method to define mock.On call
//   - authMethod string
//   - endpoint string
func (_e *MockClient_Expecter) CheckTokenEndpointAuthMethod(authMethod interface{}, endpoint interface{}) *MockClient_CheckTokenEndpointAuthMethod_Call {
	return &MockClient_CheckTokenEndpointAuthMethod_Call{Call: _e.mock.On("CheckTokenEndpointAuthMethod", authMethod, endpoint)}
}

func (_c *MockClient_CheckTokenEndpointAuthMethod_Call) Run(run func(authMethod string, endpoint string)) *MockClient_CheckTokenEndpointAuthMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClient_CheckTokenEndpointAuthMethod_Call) Return(_a0 bool) *MockClient_CheckTokenEndpointAuthMethod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CheckTokenEndpointAuthMethod_Call) RunAndReturn(run func(string, string) bool) *MockClient_CheckTokenEndpointAuthMethod_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllowedScopes provides a mock function with given fields: scopes
func (_m *MockClient) GetAllowedScopes(scopes []string) []string {
	ret := _m.Called(scopes)

	if len(ret) == 0 {
		panic("no return value specified for GetAllowedScopes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockClient_GetAllowedScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllowedScopes'
type MockClient_GetAllowedScopes_Call struct {
	*mock.Call
}

// GetAllowedScopes is a helper method to define mock.On call
//   - scopes []string
func (_e *MockClient_Expecter) GetAllowedScopes(scopes interface{}) *MockClient_GetAllowedScopes_Call {
	return &MockClient_GetAllowedScopes_Call{Call: _e.mock.On("GetAllowedScopes", scopes)}
}

func (_c *MockClient_GetAllowedScopes_Call) Run(run func(scopes []string)) *MockClient_GetAllowedScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *MockClient_GetAllowedScopes_Call) Return(_a0 []string) *MockClient_GetAllowedScopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetAllowedScopes_Call) RunAndReturn(run func([]string) []string) *MockClient_GetAllowedScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientID provides a mock function with given fields:
func (_m *MockClient) GetClientID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_GetClientID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientID'
type MockClient_GetClientID_Call struct {
	*mock.Call
}

// GetClientID is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetClientID() *MockClient_GetClientID_Call {
	return &MockClient_GetClientID_Call{Call: _e.mock.On("GetClientID")}
}

func (_c *MockClient_GetClientID_Call) Run(run func()) *MockClient_GetClientID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetClientID_Call) Return(_a0 string) *MockClient_GetClientID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetClientID_Call) RunAndReturn(run func() string) *MockClient_GetClientID_Call {
	_c.Call.Return(run)
	return _c
}

// GetClientSecret provides a mock function with given fields:
func (_m *MockClient) GetClientSecret() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientSecret")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_GetClientSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientSecret'
type MockClient_GetClientSecret_Call struct {
	*mock.Call
}

// GetClientSecret is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetClientSecret() *MockClient_GetClientSecret_Call {
	return &MockClient_GetClientSecret_Call{Call: _e.mock.On("GetClientSecret")}
}

func (_c *MockClient_GetClientSecret_Call) Run(run func()) *MockClient_GetClientSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetClientSecret_Call) Return(_a0 string) *MockClient_GetClientSecret_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetClientSecret_Call) RunAndReturn(run func() string) *MockClient_GetClientSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultRedirectURI provides a mock function with given fields:
func (_m *MockClient) GetDefaultRedirectURI() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultRedirectURI")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_GetDefaultRedirectURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultRedirectURI'
type MockClient_GetDefaultRedirectURI_Call struct {
	*mock.Call
}

// GetDefaultRedirectURI is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetDefaultRedirectURI() *MockClient_GetDefaultRedirectURI_Call {
	return &MockClient_GetDefaultRedirectURI_Call{Call: _e.mock.On("GetDefaultRedirectURI")}
}

func (_c *MockClient_GetDefaultRedirectURI_Call) Run(run func()) *MockClient_GetDefaultRedirectURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetDefaultRedirectURI_Call) Return(_a0 string) *MockClient_GetDefaultRedirectURI_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetDefaultRedirectURI_Call) RunAndReturn(run func() string) *MockClient_GetDefaultRedirectURI_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrantTypes provides a mock function with given fields:
func (_m *MockClient) GetGrantTypes() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGrantTypes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockClient_GetGrantTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantTypes'
type MockClient_GetGrantTypes_Call struct {
	*mock.Call
}

// GetGrantTypes is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetGrantTypes() *MockClient_GetGrantTypes_Call {
	return &MockClient_GetGrantTypes_Call{Call: _e.mock.On("GetGrantTypes")}
}

func (_c *MockClient_GetGrantTypes_Call) Run(run func()) *MockClient_GetGrantTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetGrantTypes_Call) Return(_a0 []string) *MockClient_GetGrantTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetGrantTypes_Call) RunAndReturn(run func() []string) *MockClient_GetGrantTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetRedirectURIs provides a mock function with given fields:
func (_m *MockClient) GetRedirectURIs() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRedirectURIs")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockClient_GetRedirectURIs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRedirectURIs'
type MockClient_GetRedirectURIs_Call struct {
	*mock.Call
}

// GetRedirectURIs is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetRedirectURIs() *MockClient_GetRedirectURIs_Call {
	return &MockClient_GetRedirectURIs_Call{Call: _e.mock.On("GetRedirectURIs")}
}

func (_c *MockClient_GetRedirectURIs_Call) Run(run func()) *MockClient_GetRedirectURIs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetRedirectURIs_Call) Return(_a0 []string) *MockClient_GetRedirectURIs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetRedirectURIs_Call) RunAndReturn(run func() []string) *MockClient_GetRedirectURIs_Call {
	_c.Call.Return(run)
	return _c
}

// GetResponseTypes provides a mock function with given fields:
func (_m *MockClient) GetResponseTypes() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResponseTypes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockClient_GetResponseTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResponseTypes'
type MockClient_GetResponseTypes_Call struct {
	*mock.Call
}

// GetResponseTypes is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetResponseTypes() *MockClient_GetResponseTypes_Call {
	return &MockClient_GetResponseTypes_Call{Call: _e.mock.On("GetResponseTypes")}
}

func (_c *MockClient_GetResponseTypes_Call) Run(run func()) *MockClient_GetResponseTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetResponseTypes_Call) Return(_a0 []string) *MockClient_GetResponseTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetResponseTypes_Call) RunAndReturn(run func() []string) *MockClient_GetResponseTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetScopes provides a mock function with given fields:
func (_m *MockClient) GetScopes() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetScopes")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockClient_GetScopes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetScopes'
type MockClient_GetScopes_Call struct {
	*mock.Call
}

// GetScopes is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetScopes() *MockClient_GetScopes_Call {
	return &MockClient_GetScopes_Call{Call: _e.mock.On("GetScopes")}
}

func (_c *MockClient_GetScopes_Call) Run(run func()) *MockClient_GetScopes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetScopes_Call) Return(_a0 []string) *MockClient_GetScopes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetScopes_Call) RunAndReturn(run func() []string) *MockClient_GetScopes_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenEndpointAuthMethod provides a mock function with given fields:
func (_m *MockClient) GetTokenEndpointAuthMethod() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTokenEndpointAuthMethod")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_GetTokenEndpointAuthMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenEndpointAuthMethod'
type MockClient_GetTokenEndpointAuthMethod_Call struct {
	*mock.Call
}

// GetTokenEndpointAuthMethod is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetTokenEndpointAuthMethod() *MockClient_GetTokenEndpointAuthMethod_Call {
	return &MockClient_GetTokenEndpointAuthMethod_Call{Call: _e.mock.On("GetTokenEndpointAuthMethod")}
}

func (_c *MockClient_GetTokenEndpointAuthMethod_Call) Run(run func()) *MockClient_GetTokenEndpointAuthMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetTokenEndpointAuthMethod_Call) Return(_a0 string) *MockClient_GetTokenEndpointAuthMethod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetTokenEndpointAuthMethod_Call) RunAndReturn(run func() string) *MockClient_GetTokenEndpointAuthMethod_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
