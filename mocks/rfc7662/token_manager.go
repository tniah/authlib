// Code generated by mockery v2.49.0. DO NOT EDIT.

package rfc7662

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/tniah/authlib/models"

	types "github.com/tniah/authlib/types"
)

// MockTokenManager is an autogenerated mock type for the TokenManager type
type MockTokenManager struct {
	mock.Mock
}

type MockTokenManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenManager) EXPECT() *MockTokenManager_Expecter {
	return &MockTokenManager_Expecter{mock: &_m.Mock}
}

// Inspect provides a mock function with given fields: client, token
func (_m *MockTokenManager) Inspect(client models.Client, token models.Token) map[string]interface{} {
	ret := _m.Called(client, token)

	if len(ret) == 0 {
		panic("no return value specified for Inspect")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(models.Client, models.Token) map[string]interface{}); ok {
		r0 = rf(client, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockTokenManager_Inspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inspect'
type MockTokenManager_Inspect_Call struct {
	*mock.Call
}

// Inspect is a helper method to define mock.On call
//   - client models.Client
//   - token models.Token
func (_e *MockTokenManager_Expecter) Inspect(client interface{}, token interface{}) *MockTokenManager_Inspect_Call {
	return &MockTokenManager_Inspect_Call{Call: _e.mock.On("Inspect", client, token)}
}

func (_c *MockTokenManager_Inspect_Call) Run(run func(client models.Client, token models.Token)) *MockTokenManager_Inspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Client), args[1].(models.Token))
	})
	return _c
}

func (_c *MockTokenManager_Inspect_Call) Return(_a0 map[string]interface{}) *MockTokenManager_Inspect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenManager_Inspect_Call) RunAndReturn(run func(models.Client, models.Token) map[string]interface{}) *MockTokenManager_Inspect_Call {
	_c.Call.Return(run)
	return _c
}

// QueryByToken provides a mock function with given fields: ctx, token, hint
func (_m *MockTokenManager) QueryByToken(ctx context.Context, token string, hint types.TokenTypeHint) (models.Token, error) {
	ret := _m.Called(ctx, token, hint)

	if len(ret) == 0 {
		panic("no return value specified for QueryByToken")
	}

	var r0 models.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.TokenTypeHint) (models.Token, error)); ok {
		return rf(ctx, token, hint)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.TokenTypeHint) models.Token); ok {
		r0 = rf(ctx, token, hint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.TokenTypeHint) error); ok {
		r1 = rf(ctx, token, hint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenManager_QueryByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryByToken'
type MockTokenManager_QueryByToken_Call struct {
	*mock.Call
}

// QueryByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - hint types.TokenTypeHint
func (_e *MockTokenManager_Expecter) QueryByToken(ctx interface{}, token interface{}, hint interface{}) *MockTokenManager_QueryByToken_Call {
	return &MockTokenManager_QueryByToken_Call{Call: _e.mock.On("QueryByToken", ctx, token, hint)}
}

func (_c *MockTokenManager_QueryByToken_Call) Run(run func(ctx context.Context, token string, hint types.TokenTypeHint)) *MockTokenManager_QueryByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.TokenTypeHint))
	})
	return _c
}

func (_c *MockTokenManager_QueryByToken_Call) Return(_a0 models.Token, _a1 error) *MockTokenManager_QueryByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenManager_QueryByToken_Call) RunAndReturn(run func(context.Context, string, types.TokenTypeHint) (models.Token, error)) *MockTokenManager_QueryByToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenManager creates a new instance of MockTokenManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenManager {
	mock := &MockTokenManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
