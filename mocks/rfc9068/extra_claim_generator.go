// Code generated by mockery v2.49.0. DO NOT EDIT.

package rfc9068

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/tniah/authlib/models"

	types "github.com/tniah/authlib/types"
)

// MockExtraClaimGenerator is an autogenerated mock type for the ExtraClaimGenerator type
type MockExtraClaimGenerator struct {
	mock.Mock
}

type MockExtraClaimGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExtraClaimGenerator) EXPECT() *MockExtraClaimGenerator_Expecter {
	return &MockExtraClaimGenerator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, grantType, client, user, scopes
func (_m *MockExtraClaimGenerator) Execute(ctx context.Context, grantType string, client models.Client, user models.User, scopes types.Scopes) (map[string]interface{}, error) {
	ret := _m.Called(ctx, grantType, client, user, scopes)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Client, models.User, types.Scopes) (map[string]interface{}, error)); ok {
		return rf(ctx, grantType, client, user, scopes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.Client, models.User, types.Scopes) map[string]interface{}); ok {
		r0 = rf(ctx, grantType, client, user, scopes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.Client, models.User, types.Scopes) error); ok {
		r1 = rf(ctx, grantType, client, user, scopes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExtraClaimGenerator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockExtraClaimGenerator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - grantType string
//   - client models.Client
//   - user models.User
//   - scopes types.Scopes
func (_e *MockExtraClaimGenerator_Expecter) Execute(ctx interface{}, grantType interface{}, client interface{}, user interface{}, scopes interface{}) *MockExtraClaimGenerator_Execute_Call {
	return &MockExtraClaimGenerator_Execute_Call{Call: _e.mock.On("Execute", ctx, grantType, client, user, scopes)}
}

func (_c *MockExtraClaimGenerator_Execute_Call) Run(run func(ctx context.Context, grantType string, client models.Client, user models.User, scopes types.Scopes)) *MockExtraClaimGenerator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.Client), args[3].(models.User), args[4].(types.Scopes))
	})
	return _c
}

func (_c *MockExtraClaimGenerator_Execute_Call) Return(_a0 map[string]interface{}, _a1 error) *MockExtraClaimGenerator_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExtraClaimGenerator_Execute_Call) RunAndReturn(run func(context.Context, string, models.Client, models.User, types.Scopes) (map[string]interface{}, error)) *MockExtraClaimGenerator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExtraClaimGenerator creates a new instance of MockExtraClaimGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExtraClaimGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExtraClaimGenerator {
	mock := &MockExtraClaimGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
