// Code generated by mockery v2.49.0. DO NOT EDIT.

package rfc9068

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	models "github.com/tniah/authlib/models"
)

// MockSigningKeyGenerator is an autogenerated mock type for the SigningKeyGenerator type
type MockSigningKeyGenerator struct {
	mock.Mock
}

type MockSigningKeyGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSigningKeyGenerator) EXPECT() *MockSigningKeyGenerator_Expecter {
	return &MockSigningKeyGenerator_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: grantType, client
func (_m *MockSigningKeyGenerator) Execute(grantType string, client models.Client) ([]byte, jwt.SigningMethod, string, error) {
	ret := _m.Called(grantType, client)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []byte
	var r1 jwt.SigningMethod
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(string, models.Client) ([]byte, jwt.SigningMethod, string, error)); ok {
		return rf(grantType, client)
	}
	if rf, ok := ret.Get(0).(func(string, models.Client) []byte); ok {
		r0 = rf(grantType, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, models.Client) jwt.SigningMethod); ok {
		r1 = rf(grantType, client)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(jwt.SigningMethod)
		}
	}

	if rf, ok := ret.Get(2).(func(string, models.Client) string); ok {
		r2 = rf(grantType, client)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(string, models.Client) error); ok {
		r3 = rf(grantType, client)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockSigningKeyGenerator_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSigningKeyGenerator_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - grantType string
//   - client models.Client
func (_e *MockSigningKeyGenerator_Expecter) Execute(grantType interface{}, client interface{}) *MockSigningKeyGenerator_Execute_Call {
	return &MockSigningKeyGenerator_Execute_Call{Call: _e.mock.On("Execute", grantType, client)}
}

func (_c *MockSigningKeyGenerator_Execute_Call) Run(run func(grantType string, client models.Client)) *MockSigningKeyGenerator_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.Client))
	})
	return _c
}

func (_c *MockSigningKeyGenerator_Execute_Call) Return(_a0 []byte, _a1 jwt.SigningMethod, _a2 string, _a3 error) *MockSigningKeyGenerator_Execute_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockSigningKeyGenerator_Execute_Call) RunAndReturn(run func(string, models.Client) ([]byte, jwt.SigningMethod, string, error)) *MockSigningKeyGenerator_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSigningKeyGenerator creates a new instance of MockSigningKeyGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSigningKeyGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSigningKeyGenerator {
	mock := &MockSigningKeyGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
